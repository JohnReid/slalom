#!/usr/bin/env python

%matplotlib
import os
import slalom
import pdb
from slalom import plotFactors, plotRelevance, plotLoadings, saveFA, dumpFA
import matplotlib.pyplot as plt

#specify where the hdf5 file is
data_dir = '../data/'
out_dir = './results'

####
#Option 1: load a pre-defined hdf5 file
#We provide an (optional) hdf file with the required data - this was generated using
#the R script write_slalom.R in the R folder
if 1:
    annoDB = 'MSigDB'
    dFile = os.path.join(data_dir,'Buettneretal2015.hdf5')
    data = slalom.load_hdf5(dFile, anno=annoDB)
    
####

####
#Option 2: load the annotation and the data directly
if 0:
    #Annotation file
    annoFile = os.path.join(data_dir,'h.all.v6.1.symbols.gmt.txt') #MSigDB
    annoDB   = 'MSigDB'
    if not os.path.exists(annoFile):
        raise Exception("MSigDB annotation file needs to be downloaded manually")
    #Note: the license of MSigDB does not permit redistribution of the raw annotation files.
    #Please register at http://software.broadinstitute.org/gsea/msigdb and download the
    #hallmark gene sets and place the file in data folder.

    #dataFile: csv file with log expresison values
    dataFile = os.path.join(data_dir,'Buettneretal.csv.gz') # note that the first column (row names) contains the cell cycle stage in numeric form
    data = slalom.utils.load_txt(dataFile=dataFile,annoFiles=annoFile,annoDBs=annoDB)
####

###alternatively the data can be loaded from the provided hdf5 file
#dFile = 'Buettneretal2015.hdf5'
#data = slalom.load_hdf5(dFile, data_dir=data_dir)


#print statistics for the loaded dataset
print ("Loaded {:d} cells, {:d} genes".format(data['Y'].shape[0],data['Y'].shape[1]))
print ("Annotation: {:d} terms".format(len(data['terms'])))

#I: indicator matrix that assigns genes to pathways
I = data['I'] #if loaded from the hdf file change to I = data['IMSigDB']
#Y: log expresison values 
Y = data['Y']
#terms: ther names of the terms
terms = data['terms']

#gene_ids: the ids of the genes in Y
# gene_ids = data['genes']  # Incorrect key
gene_ids = data['sym_names']

#initialize FA instance, here using a Gaussian noise model and fitting 3 dense hidden factors
print('Initialising')
FA = slalom.initFA(Y, terms, I, gene_ids=gene_ids, noise='gauss', nHidden=3, minGenes=15)

#model training
print('Training')
FA.train()

#print diagnostics
FA.printDiagnostics()

#plot results
fig = plotRelevance(FA)

#get factors; analogous getters are implemented for relevance and weights (see docs)
# X = FA.getX(terms=['G2m checkpoint','P53 pathway'])  # Incorrect names
terms_to_plot = ['G2M_CHECKPOINT','P53_PATHWAY']
X = FA.getX(terms=terms_to_plot)

#scatter plot of the top two factors
# fig = plotFactors(X=X, lab=data['lab'], terms=terms_to_plot, isCont=False)
fig = plotFactors(X=X, lab=data['known_names'], terms=terms_to_plot, isCont=False)
data.keys()
data['known_names']
data['termsR']
X.shape

#the same plot can be generated by passing the FA object to the plot function
plotFactors(FA=FA,idx1=0,idx2=1, lab = data['known_names'], isCont=False )

#visualize changes for the G2m checkpoint 
fig = plotLoadings(FA, terms_to_plot[0], n_genes=20)

#if not os.path.exists(out_dir):
#    os.makedirs(out_dir)
#out_file_name = os.path.join(out_dir,FA.getName()+'.hdf5')
#saveFA(FA, out_name=out_file_name
